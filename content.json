{"meta":{"title":"GANG","subtitle":"爱耍剑的程序猿一枚","description":"你尽力了，才有资格说自己运气不好","author":"GANG","url":"http://yoursite.com","root":"/"},"pages":[{"title":"All categories","date":"2019-05-23T09:44:34.000Z","updated":"2019-05-23T09:45:49.013Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2019-05-24T01:01:11.000Z","updated":"2019-05-24T01:01:11.402Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"All tags","date":"2019-05-23T09:42:49.000Z","updated":"2019-05-23T09:43:56.766Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring Boot Feign","slug":"Spring-Boot-Feign","date":"2019-05-24T03:17:47.000Z","updated":"2019-05-24T05:08:15.443Z","comments":true,"path":"2019/05/24/Spring-Boot-Feign/","link":"","permalink":"http://yoursite.com/2019/05/24/Spring-Boot-Feign/","excerpt":"","text":"在Spring Boot项目实际开发中，需要把有些独立的功能分离出来作为单独的服务，比如第三方的调用、用户信息等等，这个时候就需要来做服务间的调用，目前项目中使用consul作为实现分布式系统的服务发现与配置。 调用方在实际项目中，会使用单独的接口来调用其他服务，需要在接口上使用@FeignClient注解,name属性指定了该feign client对应的微服务service名称，并且框架将通过name属性自动将feign client解析到对应的服务器地址上。 使用过程引入依赖包1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt; &lt;/dependency&gt; 启动类启动类需要加@EnableFeignClients注解123456789101112131415** * 启动入口 */@SuppressWarnings(\"all\")@SpringBootApplication@EnableDiscoveryClient@EnableFeignClients@ComponentScan(basePackages=&#123;\"cn.net.xxx.wechat.bapi\",\"cn.net.xxx.wechat.common\"&#125;)@Import(&#123; SwaggerConfig.class, DataSourceConfig.class&#125;)public class BaseApplication &#123; public static void main(String[] args)&#123; Application.start(BaseApplication.class, args); &#125;&#125; 撸代码wechat-user这里是我们在consul上注册的服务地址。/user/sso/queryUserByToken 表示服务方完整调用路径。123456789101112131415/** * @description: 调用用户模块服务 * @date: 2018/11/28 */@FeignClient(name = \"wechat-user\")public interface UserService &#123; /** * 获取用户token * @param token * @return */ @GetMapping(value = \"/user/sso/queryUserByToken\") DataResult&lt;UserInfo&gt; queryUserByToken(@RequestParam(\"token\") String token);&#125; 服务提供方引入依赖包1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt; &lt;/dependency&gt; 启动类启动类需要加@EnableFeignClients和@EnableDiscoveryClient注解12345678910111213141516171819202122/** * 启动入口 */@SuppressWarnings(\"all\")@EnableSwagger2@EnableDiscoveryClient@EnableFeignClients@SpringBootApplication@HJundertow@ComponentScan(basePackages=&#123;\"cn.net.xxx.wechat.user\",\"cn.net.xxx.wechat.common.cache.redis\"&#125;)@Import(&#123;SwaggerConfig.class, DataSourceConfig.class&#125;)public class UserApplication &#123; /** * 程序入口 * * @param args 参数 */ public static void main(final String[] args) &#123; Application.start(UserApplication.class, args); &#125;&#125; 撸代码123456789101112131415161718192021222324252627/** * @description: 用户登录 * @date: 2018/11/26 */@Slf4j@RestController@CrossOrigin(value = \"*\", maxAge = 3600)@Api(value = \"用户登录\", tags = \"用户登录\")@RequestMapping(\"/sso\")public class LoginController &#123; /** * 根据token获取用户信息 * @param token * @return */ @GetMapping(\"/queryUserByToken\") @ApiOperation(value = \"queryUserByToken\", httpMethod = \"GET\", response = DataResult.class, notes = \"用户登录\") public DataResult&lt;UserInfo&gt; queryUserByToken(@RequestParam(\"token\") String token)&#123; UserInfo user = this.userServiceImpl.queryUserByToken(token); if(null == user)&#123; return DataResult.fail(REP_10003.getCode(), REP_10003.getMsg()); &#125; return DataResult.ok(user); &#125;&#125; consul服务注册配置12345678910111213spring.cloud.consul.host=192.168.205.196spring.cloud.consul.port=8506spring.cloud.consul.discovery.health-check-path=$&#123;server.context-path&#125;/healthspring.cloud.consul.discovery.hostname=192.168.207.18spring.cloud.consul.discovery.port=$&#123;server.port&#125;spring.cloud.consul.discovery.service-name=$&#123;spring.application.name&#125;spring.cloud.consul.discovery.enabled=truespring.cloud.consul.discovery.instance-id=$&#123;spring.cloud.consul.discovery.service-name&#125;:$&#123;spring.cloud.consul.discovery.hostname&#125;:$&#123;server.port&#125;spring.cloud.consul.discovery.health-check-interval=10sspring.cloud.consul.enabled=truespring.cloud.consul.discovery.register=true","categories":[],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"http://yoursite.com/tags/Spring-Boot/"}]},{"title":"Docker 清理日志","slug":"Docker 清理日志","date":"2019-05-23T12:52:22.000Z","updated":"2019-05-24T02:17:32.939Z","comments":true,"path":"2019/05/23/Docker 清理日志/","link":"","permalink":"http://yoursite.com/2019/05/23/Docker 清理日志/","excerpt":"","text":"Docker 日志位置docker 日志存放位置 1/var/lib/docker/containers 查看Docker日志大小查看docker各个容器日志大小1ls -lh $(find /var/lib/docker/containers/ -name *-json.log) ##清除日志清空日志1cat /dev/null &gt;/var/lib/docker/containers/containerid/containerid.log-json.log 可以直接复制上一步的日志文件路径，比如：1cat /dev/null &gt; /var/lib/docker/containers/f2a458838cc30d15396cc7ec1b3b46662140bf3cba0b12b010baf6190f61f744/f2a458838cc30d15396cc7ec1b3b46662140bf3cba0b12b010baf6190f61f744-json.log","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}]},{"title":"Docker ","slug":"Docker","date":"2019-05-23T07:39:56.000Z","updated":"2019-05-23T07:41:46.406Z","comments":true,"path":"2019/05/23/Docker/","link":"","permalink":"http://yoursite.com/2019/05/23/Docker/","excerpt":"","text":"#这是第一篇文章","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-05-22T07:58:11.004Z","updated":"2019-05-22T07:58:11.004Z","comments":true,"path":"2019/05/22/hello-world/","link":"","permalink":"http://yoursite.com/2019/05/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}